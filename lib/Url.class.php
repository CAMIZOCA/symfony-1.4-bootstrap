<?php

class Url {

    /**
     * creates a url from an array containing parts, as generated by parse_url
     *
     * @param $urlParts array  key-value pairs of various portions of the url
     *
     * @return string  full url
     */
    public static function joinParsed($urlParts) {
        $newUrl = '';
        if (isset($urlParts['scheme'])) { $newUrl .= $urlParts['scheme'] . '://'; }
        if (isset($urlParts['user'])) { $newUrl .= $urlParts['user']; }
        if (isset($urlParts['pass'])) { $newUrl .= ':' . $urlParts['pass']; }
        if (isset($urlParts['user']) || isset($urlParts['pass'])) { $newUrl .= '@'; }
        if (isset($urlParts['host'])) { $newUrl .= $urlParts['host']; }
        if (isset($urlParts['port'])) { $newUrl .= ':' . $urlParts['port']; }
        // if no path but we have query params, force path to be '/'
        if (mb_strlen($urlParts['query']) && ! mb_strlen($urlParts['path'])) { $urlParts['path'] = '/'; }
        if (isset($urlParts['path'])) { $newUrl .= $urlParts['path']; }
        if (mb_strlen($urlParts['query'])) { $newUrl .= '?' . $urlParts['query']; }
        if (isset($urlParts['fragment'])) { $newUrl .= '#' . $urlParts['fragment']; }
        return $newUrl;
    }

    /**
     * add parameters to a url
     *
     * @param $url string  starting url, with or without parameters
     * @param $params array  key-value pairs of parameters to add
     *
     * @return string  resulting url
     */
    public static function addParameters($url, $params) {
        $urlParts = parse_url($url);
        $queryParams = array();
        if (isset($urlParts['query'])) {
            parse_str($urlParts['query'], $queryParams);
        }
        foreach ($params as $key => $value) {
            if (is_null($value)) {
                unset($queryParams[$key]);
            } else {
                $queryParams[$key] = $value;
            }
        }
        $urlParts['query'] = http_build_query($queryParams);
        return self::joinParsed($urlParts);
    }

    /**
     * remove parameters from a url
     *
     * @param $url string  starting url
     * @param $params array|string  an array of parameter keys to remove, or a single key to remove
     *
     * @return string  resulting url
     */
    public static function removeParameters($url, $params) {
        if (! is_array($params)) { $params = array($params); }
        $queryParams = array();
        foreach ($params as $key) {
            $queryParams[$key] = null;
        }
        return self::addParameters($url, $queryParams);
    }

}